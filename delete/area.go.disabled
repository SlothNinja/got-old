package main

import "encoding/json"

// area of the grid.
type area struct {
	areaID
	thief     thief
	card      card
	clickable bool
}

type jArea struct {
	jAreaID
	Thief     thief `json:"thief"`
	Card      card  `json:"card"`
	Clickable bool  `json:"clickable"`
}

func (a area) MarshalJSON() ([]byte, error) {
	j := jArea{
		Thief:     a.thief,
		Card:      a.card,
		Clickable: a.clickable,
	}
	j.Row, j.Column = a.row, a.column
	return json.Marshal(j)
}

func (a *area) UnmarshalJSON(bs []byte) error {
	var j jArea
	err := json.Unmarshal(bs, &j)
	if err != nil {
		return err
	}
	a.row, a.column, a.thief, a.card, a.clickable = j.Row, j.Column, j.Thief, j.Card, j.Clickable
	return nil
}

type areaID struct {
	row    int
	column int
}

type jAreaID struct {
	Row    int `json:"row" binding:"min=1,max=8"`
	Column int `json:"column" binding:"min=1,max=8"`
}

func (aid areaID) MarshalJSON() ([]byte, error) {
	j := jAreaID{Row: aid.row, Column: aid.column}
	return json.Marshal(j)
}

func (aid *areaID) UnmarshalJSON(bs []byte) error {
	var j jAreaID
	err := json.Unmarshal(bs, &j)
	if err != nil {
		return err
	}
	aid.row, aid.column = j.Row, j.Column
	return nil
}

func newArea(row, col int, card card) area {
	return area{areaID: areaID{row: row, column: col}, card: card}
}

func (a area) hasThief() bool {
	return a.thief.pid != pidNone
}

func (a area) hasCard() bool {
	return a.card.kind != cdNone
}

func hasArea(as []area, a2 area) bool {
	for _, a1 := range as {
		b := a1.row == a2.row && a1.column == a2.column
		if b {
			return true
		}
	}
	return false
}

func (a area) hasOtherThief(p player) bool {
	return a.hasThief() && a.thief.pid != p.ID
}

type thief struct {
	pid  int
	from areaID
}

type jThief struct {
	PID  int    `json:"pid"`
	From areaID `json:"from"`
}

func (t thief) MarshalJSON() ([]byte, error) {
	j := jThief{
		PID:  t.pid,
		From: t.from,
	}
	return json.Marshal(j)
}

func (t *thief) UnmarshalJSON(bs []byte) error {
	var j jThief
	err := json.Unmarshal(bs, &j)
	if err != nil {
		return err
	}
	t.pid, t.from = j.PID, j.From
	return nil
}

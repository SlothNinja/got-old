package main-test

import (
	"net/http"
	"net/http/httptest"

	"bitbucket.org/SlothNinja/sn"
	"bitbucket.org/SlothNinja/sn/status"
	"bitbucket.org/SlothNinja/sn/user"
	"github.com/gin-gonic/gin"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"go.chromium.org/gae/service/datastore"
	"golang.org/x/net/context"
)

var _ = Describe("Show game action", func() {
	var (
		c           *gin.Context
		resp        *httptest.ResponseRecorder
		ctx         context.Context
		h           *header.Header
		g           *Game
		u1, u2, u3  user.User
		stats       user.Stats
		start, jerr bool
		msg         string
		err         error
	)

	BeforeEach(func() {
		resp = httptest.NewRecorder()
		c, _ = gin.CreateTestContext(resp)
		ctx = sn.Context(c)

		u1 = user.New(ctx)
		u1.ID = user.ID("1")
		u1.Name = "SlothNinja1"

		u2 = user.New(ctx)
		u2.ID = user.ID("2")
		u2.Name = "steve2"

		u3 = user.New(ctx)
		u3.ID = user.ID("3")
		u3.Name = "george3"

		err = datastore.Put(ctx, &u1, &u2, &u3)
		Expect(err).NotTo(HaveOccurred())

		h = header.New(ctx, 1)
		h.Creator = u1.Data()
		h.Title = "SlothNinja's Game"
		h.NumPlayers = 2

		start, err = h.Accept(c, u1)
		Expect(err).NotTo(HaveOccurred())
		Expect(start).To(BeFalse())

		start, err = h.Accept(c, u2)
		Expect(err).NotTo(HaveOccurred())
		Expect(start).To(BeTrue())

		g = Create(ctx, h)
		g.Start()

		err = g.Commit(ctx, u1, stats)
		Expect(err).NotTo(HaveOccurred())
	})

	JustBeforeEach(func() {
		show()(c)
		msg, jerr, err = testGetMsg(resp)
		Expect(err).NotTo(HaveOccurred())
	})

	AssertFailedBehavior := func() {
		It("should return an OK status", func() {
			Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
		})

		It("should indicate jerr is true", func() {
			Expect(jerr).To(BeTrue())
		})

		It("should have a running status", func() {
			g, err = Get(ctx, 1)
			Expect(err).To(BeNil())
			Expect(h.Status).To(Equal(status.Running))
		})
	}

	Describe("when there is no header id", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodGet, gamePath+showPath+"/1", nil)
		})

		It("should warn of missing header id", func() {
			Expect(msg).To(ContainSubstring("unable to get header id"))
		})

		AssertFailedBehavior()

	})

	Describe("when there is no header", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+acceptPath+"/2", nil)
			c.Params = gin.Params{gin.Param{"hid", "2"}}
		})

		It("should warn of missing header", func() {
			Expect(msg).To(ContainSubstring("unable to get header"))
		})

		AssertFailedBehavior()

	})

	Describe("when there is no current user", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+showPath+"/1", nil)
			c.Params = gin.Params{gin.Param{"hid", "1"}}
		})

		It("should warn of missing current user", func() {
			Expect(msg).To(ContainSubstring("current user not found"))
		})

		AssertFailedBehavior()
	})

	Describe("when there is a current user", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+showPath+"/1", nil)
			c.Params = gin.Params{gin.Param{"hid", "1"}}

			user.WithCurrent(c, u1)
		})

		It("should not warn of missing current user", func() {
			Expect(msg).ToNot(ContainSubstring("current user not found"))
		})

		It("should provide json game", func() {
			g, err = testGetGame(ctx, resp)
			Expect(err).ToNot(HaveOccurred())
			Expect(g).ToNot(BeNil())
			Expect(g.Header).ToNot(BeNil())
			Expect(g.Title).To(Equal("SlothNinja's Game"))
			Expect(g.State).ToNot(BeNil())
		})

		It("should indicate jerr is false", func() {
			Expect(jerr).To(BeFalse())
		})

		It("should return an OK status", func() {
			Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
		})

	})
})

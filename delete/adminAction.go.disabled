package main

import (
	"net/http"

	"bitbucket.org/SlothNinja/sn/log"
	"bitbucket.org/SlothNinja/sn/chat"
	"bitbucket.org/SlothNinja/sn/user"

	"github.com/gin-gonic/gin"

	"go.chromium.org/gae/service/datastore"
	"go.chromium.org/gae/service/info"
)

const (
	gameKey  = "Game"
	homePath = "/"
	jsonKey  = "JSON"
)

func admin() gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx := sn.Context(c)
		log.Debugf(ctx, "Entering")
		defer log.Debugf(ctx, "Exiting")

		var (
			g     *Game
			hid   int64
			ml    *chat.MLog
			cp    *Player
			cu    user.User
			found bool
			err   error
		)

		if hid, err = header.GetHID(c); err != nil {
			log.Errorf(ctx, err.Error())
			return
		}

		if g, err = Get(ctx, hid); err == nil {
			ml = chat.NewMLog(ctx, hid)
			err = datastore.Get(ctx, ml)
		}

		if err != nil {
			log.Errorf(ctx, err.Error())
			c.Abort()
			return
		}

		if cu, found = user.Current(ctx); !found {
			jsonErrorMessage(c, "current user not found")
			return
		}

		if cp, found = g.currentPlayerFor(cu); !found {
			jsonErrorMessage(c, "current player not found")
			return
		}

		c.HTML(http.StatusOK, "show", gin.H{
			"Context":    ctx,
			"VersionID":  info.VersionID(ctx),
			"CUser":      cu,
			"CUID":       cu.ID,
			"CP":         cp,
			"CPID":       cp.ID,
			"Game":       g,
			"IsAdmin":    cu.IsAdmin,
			"Admin":      true,
			"MessageLog": ml,
		})
	}
}

func adminUpdate() gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx := sn.Context(c)
		log.Debugf(ctx, "Entering")
		defer log.Debugf(ctx, "Exiting")

		var (
			g        *Game
			hid      int64
			p, cp    *Player
			cu       user.User
			template string
			found    bool
			err      error
		)

		if hid, err = header.GetHID(c); err != nil {
			jsonErrorMessage(c, err.Error())
			return
		}

		if g, err = Get(ctx, hid); err != nil {
			jsonErrorMessage(c, err.Error())
			return
		}

		switch action := c.PostForm("area"); action {
		case "admin-header":
			template = "admin/header_dialog"
		case "admin-player-row-0":
			p, _ = g.Players.byID(0)
			template = "admin/player_dialog"
		case "admin-player-row-1":
			p, _ = g.Players.byID(1)
			template = "admin/player_dialog"
		case "admin-player-row-2":
			p, _ = g.Players.byID(2)
			template = "admin/player_dialog"
		case "admin-player-row-3":
			p, _ = g.Players.byID(3)
			template = "admin/player_dialog"
		}

		if cp, found = g.currentPlayerFor(cu); !found {
			jsonErrorMessage(c, "current player not found")
			return
		}

		d := gin.H{
			"Context":   ctx,
			"VersionID": info.VersionID(ctx),
			"CUser":     cu,
			"CUID":      cu.ID,
			"CP":        cp,
			"Player":    p,
			"Game":      g,
			"IsAdmin":   cu.IsAdmin,
		}
		c.HTML(http.StatusOK, template, d)
	}
}

func adminPost() gin.HandlerFunc {
	return func(c *gin.Context) {
		ctx := sn.Context(c)
		log.Debugf(ctx, "Entering")
		defer log.Debugf(ctx, "Exiting")
		defer c.Redirect(http.StatusSeeOther, showPath+c.Param("hid"))

		var (
			g     *Game
			hid   int64
			cu    user.User
			found bool
			err   error
		)

		if cu, found = user.Current(ctx); !found {
			log.Errorf(ctx, "current user not found")
			return
		}

		if hid, err = header.GetHID(c); err != nil {
			log.Errorf(ctx, err.Error())
			return
		}

		if g, err = Get(ctx, hid); err == nil {
			switch action := c.PostForm("action"); action {
			case "admin-header":
				err = g.adminHeader(c, cu)
			case "admin-player":
				err = g.adminPlayer(c, cu)
			}
		}

		if err == nil {
			err = g.save(ctx)
		}

		if err != nil {
			log.Errorf(ctx, err.Error())
		}

	}
}

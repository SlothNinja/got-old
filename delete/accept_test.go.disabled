package controller-test

import (
	"net/http"
	"net/http/httptest"

	"bitbucket.org/SlothNinja/sn"
	"bitbucket.org/SlothNinja/sn/status"
	"bitbucket.org/SlothNinja/sn/user"
	"github.com/gin-gonic/gin"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"go.chromium.org/gae/service/datastore"
	"golang.org/x/net/context"
)

var _ = Describe("Accept invitation action", func() {
	var (
		c          *gin.Context
		g          *Game
		h          *header.Header
		numUsers   int
		msg        string
		resp       *httptest.ResponseRecorder
		ctx        context.Context
		u1, u2, u3 user.User
		jerr       bool
		err        error
	)

	BeforeEach(func() {
		resp = httptest.NewRecorder()
		c, _ = gin.CreateTestContext(resp)
		ctx = sn.Context(c)

		h = header.New(ctx, 1)
		h.NumPlayers = 3
		h.Status = status.Recruiting
		err = datastore.Put(ctx, h)
		Expect(err).NotTo(HaveOccurred())

		u1 = user.New(ctx)
		u1.ID = user.ID("1")
		u1.Name = "SlothNinja1"

		u2 = user.New(ctx)
		u2.ID = user.ID("2")
		u2.Name = "steve2"

		u3 = user.New(ctx)
		u3.ID = user.ID("3")
		u3.Name = "george3"

		err = datastore.Put(ctx, &u1, &u2, &u3)
		Expect(err).NotTo(HaveOccurred())
	})

	JustBeforeEach(func() {
		h, err = header.Get(ctx, 1)
		Expect(err).To(BeNil())

		numUsers = len(h.Users)
		accept()(c)

		msg, jerr, err = testGetMsg(resp)
		Expect(err).To(BeNil())
	})

	AssertFailedBehavior := func() {
		It("should not add a user to game invitation", func() {
			h, err = header.Get(ctx, 1)
			Expect(err).To(BeNil())
			Expect(h.Users).To(HaveLen(numUsers))
		})

		It("should return an OK status", func() {
			Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
		})

		It("should indicate jerr is true", func() {
			Expect(jerr).To(BeTrue())
		})

		It("status should be recruiting", func() {
			h, err = header.Get(ctx, 1)
			Expect(err).To(BeNil())
			Expect(h.Status).To(Equal(status.Recruiting))
		})
	}

	Describe("when there is no header id", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+acceptPath+"/1", nil)
		})

		It("should warn of missing header id", func() {
			Expect(msg).To(ContainSubstring("unable to get header id"))
		})

		AssertFailedBehavior()

	})

	Describe("when there is no header", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+acceptPath+"/2", nil)
			c.Params = gin.Params{gin.Param{"hid", "2"}}
		})

		It("should warn of missing header", func() {
			Expect(msg).To(ContainSubstring("unable to get header"))
		})

		AssertFailedBehavior()

	})

	Describe("when there is no current user", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+acceptPath+"/1", nil)
			c.Params = gin.Params{gin.Param{"hid", "1"}}
		})

		It("should warn of missing current user", func() {
			Expect(msg).To(ContainSubstring("current user not found"))
		})

		AssertFailedBehavior()
	})

	Describe("when there is a current user", func() {

		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+acceptPath+"/1", nil)
			c.Params = gin.Params{gin.Param{"hid", "1"}}

			user.WithCurrent(c, u1)
		})

		It("should not warn of missing current user", func() {
			Expect(msg).ToNot(ContainSubstring("current user not found"))
		})

		Context("when a seat is available", func() {
			It("should indicate user joined game invitation", func() {
				Expect(msg).To(ContainSubstring("joined"))
			})

			It("should add user to game invitation", func() {
				h, err = header.Get(ctx, 1)
				Expect(err).To(BeNil())
				Expect(h.Users).To(HaveLen(numUsers + 1))
			})
		})

		Context("when a seat is not available", func() {
			BeforeEach(func() {
				h.Accept(c, u1)
				h.Accept(c, u2)
				h.Accept(c, u3)
				err = datastore.Put(ctx, h)
				Expect(err).ToNot(HaveOccurred())
			})

			It("should indicate user has already joined", func() {
				Expect(msg).To(ContainSubstring("has the maximum"))
			})

			AssertFailedBehavior()

		})

		Context("when unable to save to the datastore", func() {
			BeforeEach(func() {
				testBreakPut(c)
			})

			It("should indicate unable to save", func() {
				Expect(msg).To(ContainSubstring("unable to save"))
			})

			AssertFailedBehavior()
		})

		Context("when user has already joined", func() {
			BeforeEach(func() {
				h.Accept(c, u1)
				err = datastore.Put(ctx, h)
				Expect(err).ToNot(HaveOccurred())
			})

			It("should indicate user has already joined game invitation", func() {
				Expect(msg).To(ContainSubstring("already joined"))
			})

			AssertFailedBehavior()
		})

		Context("when another user has already joined", func() {
			BeforeEach(func() {
				h.Accept(c, u2)
				err = datastore.Put(ctx, h)
				Expect(err).ToNot(HaveOccurred())
			})

			Context("when a seat is available", func() {

				It("should indicate user joined game invitation", func() {
					Expect(msg).To(ContainSubstring("joined"))
				})

				It("should add user to game invitation", func() {
					h, err = header.Get(ctx, 1)
					Expect(err).To(BeNil())
					Expect(h.Users).To(HaveLen(numUsers + 1))
				})

				It("should indicate jerr is false", func() {
					Expect(jerr).To(BeFalse())
				})

				Context("when unable to save to the datastore", func() {
					BeforeEach(func() {
						testBreakPut(c)
					})

					It("should not indicate user joined game invitation", func() {
						Expect(msg).ToNot(ContainSubstring("joined"))
					})

					It("should indicate unable to save", func() {
						Expect(msg).To(ContainSubstring("unable to save"))
					})

					AssertFailedBehavior()
				})
			})

			Context("when the last seat is available", func() {
				BeforeEach(func() {
					h.Accept(c, u3)
					err = datastore.Put(ctx, h)
					Expect(err).ToNot(HaveOccurred())
				})

				It("should indicate user joined game invitation", func() {
					Expect(msg).To(ContainSubstring("joined"))
				})

				It("should inform user game started", func() {
					Expect(msg).To(ContainSubstring("started"))
				})

				It("all seats should be full", func() {
					g, err = Get(ctx, 1)
					Expect(err).To(BeNil())
					Expect(g.Users).To(HaveLen(h.NumPlayers))
				})

				It("status should be running", func() {
					g, err = Get(ctx, 1)
					Expect(err).To(BeNil())
					Expect(g.Status).To(Equal(status.Running))
				})

				It("should indicate jerr is false", func() {
					Expect(jerr).To(BeFalse())
				})

				Context("when unable to save to the datastore", func() {
					BeforeEach(func() {
						testBreakPut(c)
					})

					It("should not indicate user joined game invitation", func() {
						Expect(msg).ToNot(ContainSubstring("joined"))
					})

					It("should not inform user game started", func() {
						Expect(msg).ToNot(ContainSubstring("started"))
					})

					It("should indicate unable to save", func() {
						Expect(msg).To(ContainSubstring("unable to commit"))
					})

					AssertFailedBehavior()
				})

			})
		})
	})
})

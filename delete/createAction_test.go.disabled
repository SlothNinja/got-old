package main

import (
	"net/http"
	"net/http/httptest"
	"strings"

	"bitbucket.org/SlothNinja/sn"
	"bitbucket.org/SlothNinja/sn/status"
	"bitbucket.org/SlothNinja/sn/user"
	"github.com/gin-gonic/gin"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"go.chromium.org/gae/service/datastore"
	"golang.org/x/net/context"
)

var _ = Describe("Create invitation action", func() {
	var (
		c    *gin.Context
		resp *httptest.ResponseRecorder
		msg  string
		ctx  context.Context
		u1   user.User
		jerr bool
		err  error
	)

	BeforeEach(func() {
		resp = httptest.NewRecorder()
		c, _ = gin.CreateTestContext(resp)
		ctx = sn.Context(c)

		u1 = user.New(ctx)
		u1.ID = user.ID("1")
		u1.Name = "SlothNinja1"

		err = datastore.Put(ctx, &u1)
		Expect(err).NotTo(HaveOccurred())
	})

	JustBeforeEach(func() {
		create()(c)
		msg, jerr, err = testGetMsg(resp)
		Expect(err).NotTo(HaveOccurred())
	})

	AssertFailedBehavior := func() {
		It("should not warn of missing current user", func() {
			Expect(msg).ToNot(ContainSubstring("current user not found"))
		})

		It("should return an OK status", func() {
			Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
		})

		It("should return indicate jerr is true", func() {
			Expect(jerr).To(BeTrue())
		})

		It("should not create game", func() {
			_, err = Get(ctx, 1)
			Expect(err).To(HaveOccurred())
		})
	}

	Describe("when there is no current user", func() {

		AssertFailedBehavior = func() {

			It("should return an OK status", func() {
				Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
			})

			It("should not create game", func() {
				_, err = Get(ctx, 1)
				Expect(err).To(HaveOccurred())
			})
		}

		BeforeEach(func() {
			c.Request = httptest.NewRequest(
				http.MethodPost,
				gamePath+createPath,
				strings.NewReader(`{ "title": "Jeff's Game", "numPlayers": 3, "twoThief": true, "password": "password" }`),
			)
			c.Request.Header.Set("Content-Type", "application/json")
		})

		It("should warn of missing current user", func() {
			Expect(msg).To(ContainSubstring("current user not found"))
		})

		AssertFailedBehavior()
	})

	Describe("when there is a current user", func() {
		BeforeEach(func() {
			user.WithCurrent(c, u1)
		})

		Describe("when there is a valid request", func() {

			BeforeEach(func() {
				c.Request = httptest.NewRequest(
					http.MethodPost,
					gamePath+createPath,
					strings.NewReader(`{ "title": "Jeff's Game", "numPlayers": 3, "twoThief": true, "password": "password" }`),
				)
				c.Request.Header.Set("Content-Type", "application/json")
			})

			It("should not warn of missing current user", func() {
				Expect(msg).ToNot(ContainSubstring("current user not found"))
			})

			It("should return an OK status", func() {
				Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
			})

			It("should create invitation", func() {
				var h *header.Header
				h, err = header.Get(ctx, 1)
				Expect(err).ToNot(HaveOccurred())
				Expect(h).ToNot(BeNil())
				Expect(h.Title).To(Equal("Jeff's Game"))
				Expect(h.TwoThiefVariant).To(BeTrue())
				Expect(h.NumPlayers).To(Equal(3))
				Expect(h.Password).To(Equal("password"))
				Expect(h.Creator).To(Equal(u1.Data()))
				Expect(user.DataHas(h.Users, u1.Data())).To(BeTrue())
				Expect(h.Status).To(Equal(status.Recruiting))
			})

			Context("when unable to save to the datastore", func() {

				BeforeEach(func() {
					testBreakPut(c)
				})

				It("should warn of broken datastore", func() {
					Expect(msg).To(ContainSubstring("broken put"))
				})

				AssertFailedBehavior()

			})
		})

		Describe("when there is an invalid request", func() {

			BeforeEach(func() {
				c.Request = httptest.NewRequest(
					http.MethodPost,
					gamePath+createPath,
					strings.NewReader(`{"title" => "Jeff's Game"}`),
				)
				c.Request.Header.Set("Content-Type", "application/json")
			})

			It("should warn of invalid request", func() {
				Expect(msg).To(ContainSubstring("invalid character"))
			})

			AssertFailedBehavior()

		})

		Describe("when the json data does not validate", func() {

			Context("when title is too short", func() {

				BeforeEach(func() {
					c.Request = httptest.NewRequest(
						http.MethodPost,
						gamePath+createPath,
						strings.NewReader(`{ "title": "Jeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's GameJeff's Game", "numPlayers": 3, "twoThief": true, "password": "password" }`),
					)
					c.Request.Header.Set("Content-Type", "application/json")
				})

				It("should warn title failed validation", func() {
					Expect(msg).To(ContainSubstring("'Title' failed"))
				})

				AssertFailedBehavior()

			})

			Context("when title is too short", func() {

				BeforeEach(func() {
					c.Request = httptest.NewRequest(
						http.MethodPost,
						gamePath+createPath,
						strings.NewReader(`{ "title": "Je", "numPlayers": 3, "twoThief": true, "password": "password" }`),
					)
					c.Request.Header.Set("Content-Type", "application/json")
				})

				It("should warn title failed validation", func() {
					Expect(msg).To(ContainSubstring("'Title' failed"))
				})

				AssertFailedBehavior()
			})

			Context("when number of player is too small", func() {

				BeforeEach(func() {
					c.Request = httptest.NewRequest(
						http.MethodPost,
						gamePath+createPath,
						strings.NewReader(`{ "title": "Jeff's Game", "numPlayers": 1, "twoThief": true, "password": "password" }`),
					)
					c.Request.Header.Set("Content-Type", "application/json")
				})

				It("should warn title failed validation", func() {
					Expect(msg).To(ContainSubstring("'NumPlayers' failed"))
				})

				AssertFailedBehavior()
			})

			Context("when number of player is too large", func() {

				BeforeEach(func() {
					c.Request = httptest.NewRequest(
						http.MethodPost,
						gamePath+createPath,
						strings.NewReader(`{ "title": "Jeff's Game", "numPlayers": 5, "twoThief": true, "password": "password" }`),
					)
					c.Request.Header.Set("Content-Type", "application/json")
				})

				It("should warn title failed validation", func() {
					Expect(msg).To(ContainSubstring("'NumPlayers' failed"))
				})

				AssertFailedBehavior()
			})
		})
	})
})

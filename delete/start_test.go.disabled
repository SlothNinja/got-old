package main

import (
	"errors"
	"net/http"
	"net/http/httptest"

	"bitbucket.org/SlothNinja/got/game"
	"bitbucket.org/SlothNinja/status"
	"bitbucket.org/SlothNinja/user"
	"github.com/gin-gonic/gin"

	"bitbucket.org/SlothNinja/store"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
)

var _ = Describe("Controller", func() {
	var (
		c          *gin.Context
		s          *server
		u1, u2, u3 *user.User
		resp       *httptest.ResponseRecorder
		err        error
	)

	BeforeEach(func() {
		s = new(server)

		resp = httptest.NewRecorder()
		c, _ = gin.CreateTestContext(resp)
		c.Request = httptest.NewRequest(http.MethodPost, gamePath+showPath+"/1", nil)
		c.Params = gin.Params{gin.Param{Key: "hid", Value: "1"}}

		u1 = new(user.User)
		u1.ID = user.ID("1")
		u1.Name = "SlothNinja1"

		u2 = new(user.User)
		u2.ID = user.ID("2")
		u2.Name = "steve2"

		u3 = new(user.User)
		u3.ID = user.ID("3")
		u3.Name = "george3"

		g := game.New()
		g.Header.ID = 1
		s.store = &store.Mock{games: []*game.game{g}}

		user.WithCurrent(c, u1)
	})

	Describe("start", func() {

		var (
			g     *game.game
			h     *Header
			start bool
		)

		BeforeEach(func() {
			h = NewHeader()
			h.ID = 1
			h.Title = "New game"
			h.NumPlayers = 2

			start, err = h.Accept(c, u1)
			Expect(err).ToNot(HaveOccurred())
			Expect(start).To(BeFalse())

			start, err = h.Accept(c, u2)
			Expect(err).ToNot(HaveOccurred())
			Expect(start).To(BeTrue())

			h.Status = status.Starting

			s.store = &store.Mock{Headers: []*Header{h}}
		})

		JustBeforeEach(func() {
			s.start()(c)
		})

		Describe("when there is no header id", func() {

			BeforeEach(func() {
				c.Params = nil
			})

			It("should abort and return http error", func() {
				Expect(resp.Result().StatusCode).To(Equal(http.StatusInternalServerError))
			})
		})

		Describe("when unable to get header", func() {
			BeforeEach(func() {
				s.store = &store.Mock{GetError: errors.New("unable to get header")}
			})

			It("should abort and return http error", func() {
				Expect(resp.Result().StatusCode).To(Equal(http.StatusInternalServerError))
			})
		})

		Describe("when able to get header", func() {
			Describe("when unable to put game", func() {
				BeforeEach(func() {
					s.store = &store.Mock{PutError: errors.New("unable to put game")}
				})

				It("should abort and return http error", func() {
					Expect(resp.Result().StatusCode).To(Equal(http.StatusInternalServerError))
				})
			})

			Describe("when able to start game", func() {

				BeforeEach(func() {
					g = game.New()
					s.store = &store.Mock{games: []*game.game{g}}
				})

				It("should not abort", func() {
					Expect(resp.Result().StatusCode).To(Equal(http.StatusOK))
				})
			})

		})
	})
})

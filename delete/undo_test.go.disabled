package main

import (
	"net/http"
	"net/http/httptest"

	"bitbucket.org/SlothNinja/sn/user"
	"github.com/gin-gonic/gin"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"golang.org/x/net/context"
)

var _ = Describe("UndoAction", func() {
	var (
		c    *gin.Context
		resp *httptest.ResponseRecorder
		ctx  context.Context
		u    user.User
		err  error
	)

	BeforeEach(func() {
		resp = httptest.NewRecorder()
		c, _ = gin.CreateTestContext(resp)
		ctx = sn.Context(c)
		err = putUser(ctx)
		Expect(err).NotTo(HaveOccurred())
		u, err = user.ByGoogleID(ctx, "1")
		Expect(err).NotTo(HaveOccurred())
	})

	Describe("Undo game", func() {
		BeforeEach(func() {
			c.Request = httptest.NewRequest(http.MethodPost, gamePath+undoPath+"/1", nil)
			c.Params = gin.Params{gin.Param{"hid", "1"}}
			err = putHeader(ctx, 1)
			Expect(err).To(BeNil())
			_, err = header.GetHeader(ctx, 1)
			Expect(err).To(BeNil())
		})
		Context("without current user", func() {
			It("should warn of missing current user", func() {
				undo()(c)
				result := resp.Body.String()
				Expect(result).To(ContainSubstring("current user not found"))
			})
		})
		Context("with current user", func() {
			BeforeEach(func() {
				Expect(u).ToNot(BeNil())
				user.WithCurrent(c, u)
			})
			It("should not warn of missing current user", func() {
				undo()(c)
				result := resp.Body.String()
				Expect(result).ToNot(ContainSubstring("Current user not found."))
			})
			Context("with correct json params", func() {
				It("should create game", func() {
					undo()(c)
				})
			})
			Context("With incorrect json params", func() {
				It("should not create game", func() {
					undo()(c)
				})
			})
		})
	})
})
